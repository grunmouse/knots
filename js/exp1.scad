$fn=40;

function vectorLength(v1,v2) = sqrt(
    (v2[0]-v1[0])*(v2[0]-v1[0])+
    (v2[1]-v1[1])*(v2[1]-v1[1])+
    (v2[2]-v1[2])*(v2[2]-v1[2]));

function lookAt(v1, v2) =
    let(v = v2-v1)
    [
       0,
       acos(v[2]/vectorLength(v1,v2)),
       atan2(v[1], v[0])
    ];


module edge(p1,p2)
{
    translate(p1)
    rotate(lookAt(p1,p2))
    cylinder(vectorLength(p1,p2),radius,radius);
}

module point(p){
    translate(p) sphere(radius);
}

radius = 1;
color("#FED6BC"){
edge([0,0,0],[5,0,0]);
edge([5,0,0],[5,0,10]);
edge([5,0,10],[10,0,10]);
edge([10,0,10],[15,-5,10]);
edge([15,-5,10],[17.5,-7.5,10]);
edge([17.5,-7.5,10],[17.5,-7.5,0]);
edge([17.5,-7.5,0],[20,-10,0]);
edge([20,-10,0],[25,-5,0]);
edge([25,-5,0],[30,0,0]);
edge([30,0,0],[65,0,0]);
edge([65,0,0],[65,0,10]);
edge([65,0,10],[100,0,10]);
edge([100,0,10],[100,-10,10]);
edge([100,-10,10],[100,-10,0]);
edge([100,-10,0],[100,-20,0]);
edge([100,-20,0],[90,-20,0]);
edge([90,-20,0],[80,-20,0]);
edge([80,-20,0],[70,-20,0]);
edge([70,-20,0],[60,-20,0]);
edge([60,-20,0],[50,-20,0]);
edge([50,-20,0],[40,-20,0]);
edge([40,-20,0],[35,-15,0]);
edge([35,-15,0],[30,-10,0]);
edge([30,-10,0],[30,-10,10]);
edge([30,-10,10],[25,-5,10]);
edge([25,-5,10],[22.5,-2.5,10]);
edge([22.5,-2.5,10],[22.5,-2.5,0]);
edge([22.5,-2.5,0],[20,0,0]);
edge([20,0,0],[15,-5,0]);
edge([15,-5,0],[10,-10,0]);
edge([10,-10,0],[10,-15,0]);
edge([10,-15,0],[10,-15,10]);
edge([10,-15,10],[10,-20,10]);
edge([10,-20,10],[30,-20,10]);
edge([30,-20,10],[35,-15,10]);
edge([35,-15,10],[40,-10,10]);
edge([40,-10,10],[45,-10,10]);
edge([45,-10,10],[45,-10,-10]);
edge([45,-10,-10],[50,-10,-10]);
edge([50,-10,-10],[50,-20,-10]);
edge([50,-20,-10],[50,-30,-10]);
edge([50,-30,-10],[55,-30,-10]);
edge([55,-30,-10],[55,-30,10]);
edge([55,-30,10],[60,-30,10]);
edge([60,-30,10],[60,-20,10]);
edge([60,-20,10],[60,-10,10]);
edge([60,-10,10],[65,-10,10]);
edge([65,-10,10],[65,-10,-10]);
edge([65,-10,-10],[70,-10,-10]);
edge([70,-10,-10],[70,-20,-10]);
edge([70,-20,-10],[70,-30,-10]);
edge([70,-30,-10],[75,-30,-10]);
edge([75,-30,-10],[75,-30,10]);
edge([75,-30,10],[80,-30,10]);
edge([80,-30,10],[80,-20,10]);
edge([80,-20,10],[80,-10,10]);
edge([80,-10,10],[85,-10,10]);
edge([85,-10,10],[85,-10,-10]);
edge([85,-10,-10],[90,-10,-10]);
edge([90,-10,-10],[90,-20,-10]);
edge([90,-20,-10],[90,-30,-10]);
point([0,0,0]);
point([5,0,0]);
point([5,0,10]);
point([10,0,10]);
point([15,-5,10]);
point([17.5,-7.5,10]);
point([17.5,-7.5,0]);
point([20,-10,0]);
point([25,-5,0]);
point([30,0,0]);
point([65,0,0]);
point([65,0,10]);
point([100,0,10]);
point([100,-10,10]);
point([100,-10,0]);
point([100,-20,0]);
point([90,-20,0]);
point([80,-20,0]);
point([70,-20,0]);
point([60,-20,0]);
point([50,-20,0]);
point([40,-20,0]);
point([35,-15,0]);
point([30,-10,0]);
point([30,-10,10]);
point([25,-5,10]);
point([22.5,-2.5,10]);
point([22.5,-2.5,0]);
point([20,0,0]);
point([15,-5,0]);
point([10,-10,0]);
point([10,-15,0]);
point([10,-15,10]);
point([10,-20,10]);
point([30,-20,10]);
point([35,-15,10]);
point([40,-10,10]);
point([45,-10,10]);
point([45,-10,-10]);
point([50,-10,-10]);
point([50,-20,-10]);
point([50,-30,-10]);
point([55,-30,-10]);
point([55,-30,10]);
point([60,-30,10]);
point([60,-20,10]);
point([60,-10,10]);
point([65,-10,10]);
point([65,-10,-10]);
point([70,-10,-10]);
point([70,-20,-10]);
point([70,-30,-10]);
point([75,-30,-10]);
point([75,-30,10]);
point([80,-30,10]);
point([80,-20,10]);
point([80,-10,10]);
point([85,-10,10]);
point([85,-10,-10]);
point([90,-10,-10]);
point([90,-20,-10]);
point([90,-30,-10]);
}